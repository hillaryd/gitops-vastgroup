name: Build Custom ERPNext Image

# Add Concurrency control to prevent multiple builds running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    paths:
      - 'ci/**'
      - '.github/workflows/ci.yml'

  workflow_dispatch:
    inputs:
      image:
        description: Image name
        type: string
        default: ""
      version:
        description: Image version tag
        type: string
        default: ""
      frappe-repo:
        description: Frappe repo
        type: string
        default: ""
      frappe-version:
        description: Frappe branch
        type: string
        default: ""
      py-version:
        description: Python version
        type: string
        default: ""
      nodejs-version:
        description: NodeJS version
        type: string
        default: ""
      apps-json-base64:
        description: base64 encoded string of apps.json
        type: string
        default: ""
      dockerfile:
        description: dockerfile path from context
        type: string
        default: ""
      registry:
        description: Container registry
        type: string
        default: ""
      registry-user:
        description: Registry username
        type: string
        default: ""

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours maximimum for builds
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check required files exist
        id: check-files
        run: |
          missing_files=0
          
          if [ ! -f "./ci/build.env" ]; then
            echo "::error::build.env file not found in ci directory"
            missing_files=1
          fi
          
          if [ ! -f "./ci/apps.json" ]; then
            echo "::error::apps.json file not found in ci directory"
            missing_files=1
          fi
          
          if [ $missing_files -eq 1 ]; then
            exit 1
          fi

      - name: Generate version
        id: version
        run: |
          # Read version from version.txt
          if [[ -f "./ci/version.txt" ]]; then
            VERSION=$(cat ./ci/version.txt | tr -d '[:space:]')
          else
            # Fallback to 1.0.0 if file doesn't exist
            VERSION="1.0.0"
          fi
          
          # Check if version is provided via input (override)
          if [[ -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Source Build Env
        id: source-build-env
        run: |
          cat ./ci/build.env >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry || env.REGISTRY }}
          username: ${{ inputs.registry-user || github.actor }}
          password: ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}

      - name: Checkout Frappe Docker
        uses: actions/checkout@v4
        with:
          repository: frappe/frappe_docker
          path: builds
          fetch-depth: 1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          push: true
          context: builds
          file: builds/${{ inputs.dockerfile || env.DOCKERFILE }}
          tags: |
            ${{ inputs.registry || env.REGISTRY }}/${{ env.PROJECT_NAMESPACE || github.repository }}/${{ inputs.image || env.IMAGE }}:${{ inputs.version || env.VERSION }}
          # Disable caching to always fetch fresh app repositories
          no-cache: true
          build-args: |
            FRAPPE_PATH=${{ inputs.frappe-repo || env.FRAPPE_REPO }}
            FRAPPE_BRANCH=${{ inputs.frappe-version || env.FRAPPE_VERSION }}
            PYTHON_VERSION=${{ inputs.py-version || env.PY_VERSION }}
            NODE_VERSION=${{ inputs.nodejs-version || env.NODEJS_VERSION }}
            APPS_JSON_BASE64=${{ inputs.apps-json-base64 || env.APPS_JSON_BASE64 }}
            CACHE_BUST=${{ github.run_id }}-${{ github.run_number }}
          labels: |
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ env.COMMIT_SHA }}
            org.opencontainers.image.version=${{ inputs.version || env.VERSION }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Image details
        run: |
          echo "::notice title=Image Built Successfully::${{ inputs.registry || env.REGISTRY }}/${{ env.PROJECT_NAMESPACE || github.repository }}/${{ inputs.image || env.IMAGE }}:${{ inputs.version || env.VERSION }}"
          echo "::group::Image Details"
          echo "Full image reference: ${{ inputs.registry || env.REGISTRY }}/${{ env.PROJECT_NAMESPACE || github.repository }}/${{ inputs.image || env.IMAGE }}:${{ inputs.version || env.VERSION }}"
          echo "Image digest: ${{ steps.docker_build.outputs.digest }}"
          echo "::endgroup::"
